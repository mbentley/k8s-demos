kind: Service
apiVersion: v1
metadata:
  name: docker-demo
spec:
  selector:
    app: docker-demo
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-demo
  labels:
    app: docker-demo
spec:
  replicas: 4
  selector:
    matchLabels:
      app: docker-demo
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        traffic.sidecar.istio.io/excludeInboundPorts: "8080"
      labels:
        app: docker-demo
    spec:
      containers:
      - image: mbentley/docker-demo:visual
        name: docker-demo-container
        env:
        - name: app
          value: docker-demo
        ports:
        - containerPort: 8080
---
apiVersion: projectcontour.io/v1
kind: HTTPProxy
metadata:
  name: docker-demo
spec:
  virtualhost:
    fqdn: docker-demo.${TKG_CLUSTER}.tkg.vmware.work.mbentley.net
    tls:
      secretName: default-http-backend/${TKG_CLUSTER}.tkg.vmware.work.mbentley.net
  routes:
    - services:
        - name: docker-demo
          port: 8080
#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: docker-demo
#  annotations:
#    cert-manager.io/cluster-issuer: "zerossl"
#    ingress.kubernetes.io/force-ssl-redirect: "true"
#    kubernetes.io/ingress.class: "contour"
#spec:
#  tls:
#  - hosts:
#    - docker-demo.${TKG_CLUSTER}.tkg.vmware.work.mbentley.net
#    secretName: docker-demo.${TKG_CLUSTER}.tkg.vmware.work.mbentley.net
#  rules:
#  - host: docker-demo.${TKG_CLUSTER}.tkg.vmware.work.mbentley.net
#    http:
#      paths:
#        - pathType: Prefix
#          path: /
#          backend:
#            service:
#              name: docker-demo
#              port:
#                number: 8080
